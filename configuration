Objective - The Objective of the project is to configure webhook in razorpay dashboard and configure webhook in aws. Goal to achieve - Once the payment is successful, Webhook to send payment details to aws & check the payment details in aws lambda cloudwatch. What is a webhook ? A webhook is a way for one application to send real-time data to another application when a specific event occurs. It is a server-to-server notification mechanism for sending real time Data. What is an Event ? Understand from this scenario, lets say the payment is successfully done and the payment gateway captures the payment. Here the event is payment capture. Based on this event we will call the Callback API and send the data. Configuration in AWS Prerequisite 1. AWS login Configuration 1. Go to aws lambda >>Create a function >> Paste the code/ script Make sure ( important step ) - Mention the correct Secret code, the same secret code should be mentioned in the razorpay configuration. Save and Deploy. 2. Create an API in AWS API Gateway 2.1 Go to AWS API gateway >> create an API >> REST API or just for checking you can create HTTP API. 2.2 Use method - ANY and path name 2.2 In the Integration section >> Select AWS lambda >> Select your function. Save and Deploy. Important step - You will receive a URL - https://7bclvqzs76.execute-api.us-east-1.amazonaws.com/default
Your webhook url will be will pathname - https://7bclvqzs76.execute-api.us-east-1.amazonaws.com/default/razorpayWebhookHandler Your API name is - with method - ANY Configuration in Razorpay dashboard? Prerequisites 1. Razorpay login - Register and do a free login. 2. Go to Account settings >> Click on webhooks. 3. Click on add webhook 4. Type the URL and Secret code 5. Active event >> payment.event
6. Save Important - Razorpay also does transactions in paisa , so if you are paying 50 rupees , actually razorpay is doing it as 5000 paisa. It is converting and showing you in rupees. Screenshot for reference -
AWS lambada code -
const crypto = require("crypto");
exports.handler = async (event) => { const webhookSecret = "XXXXXX"; // Your Razorpay webhook secret
const body = event.body;
const signature = event.headers['x-razorpay-signature'];
// Signature verification
const expectedSignature = crypto
.createHmac('sha256', webhookSecret)
.update(body)
.digest('hex');
if (signature === expectedSignature) {
console.log("✅ Webhook verified");
const payload = JSON.parse(body);
const paymentData = payload.payload?.payment?.entity;
if (paymentData) {
const payment_id = paymentData.id;
const order_id = paymentData.order_id;
const amount = paymentData.amount;
const status = paymentData.status;
const created_at = new Date(paymentData.created_at * 1000).toISOString();
console.log("Payment ID:", payment_id);
console.log("Order ID:", order_id);
console.log("Amount:", amount);
console.log("Status:", status);
console.log("Payment Date:", created_at);
} else {
console.log("❌ Payment data not found in webhook payload.");
}
return {
statusCode: 200,
body: JSON.stringify({ message: "Webhook received and processed." }),
};
} else {
console.log("❌ Invalid webhook signature");
return {
statusCode: 400,
body: JSON.stringify({ message: "Invalid signature" }),
};
}
};
Result and Observations 1. Make a successful payment 2. Go to AWS lambda >> Monitor >> Cloudwatch 3. Check the payment id , order id , amount Screenshot

